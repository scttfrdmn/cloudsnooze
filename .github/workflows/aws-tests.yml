name: AWS Integration Tests

on:
  # Run tests on pull requests to main
  pull_request:
    branches: [ main ]
  
  # Allow manual triggering
  workflow_dispatch:

jobs:
  test:
    name: Run AWS integration tests
    runs-on: ubuntu-latest
    
    # Only run if the PR or commit has files that would affect AWS integration
    # This saves testing resources by only running when needed
    if: |
      contains(github.event.head_commit.message, '[aws-test]') ||
      github.event_name == 'workflow_dispatch' ||
      contains(join(github.event.pull_request.labels.*.name), 'aws-test')
    
    permissions:
      # Only grant required permissions
      contents: read
      id-token: write # Needed for OIDC auth with AWS
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          # Use GitHub OIDC for secure authentication (recommended)
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-west-2
          # Alternative method using access keys (less secure but simpler)
          # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      - name: Create temporary test resources
        run: |
          # Example: Create temporary EC2 instance with unique ID for testing
          TEST_ID=$(echo $GITHUB_SHA | cut -c1-8)
          echo "Creating test resources with ID: $TEST_ID"
          
          # Create a small t2.micro instance for testing
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-0c55b159cbfafe1f0 \
            --instance-type t2.micro \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=cloudsnooze-test-$TEST_ID},{Key=Purpose,Value=Testing},{Key=AutoDelete,Value=true}]" \
            --query 'Instances[0].InstanceId' \
            --output text)
          
          # Save instance ID for later cleanup
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "Created test instance: $INSTANCE_ID"
      
      - name: Run integration tests
        run: |
          # Set test-specific environment variables
          export CLOUDSNOOZE_TEST_INSTANCE_ID=$INSTANCE_ID
          export CLOUDSNOOZE_TEST_REGION=us-west-2
          
          # Run the Go integration tests
          cd daemon/cloud/aws
          go test -v -tags=integration ./...
      
      - name: Cleanup test resources
        if: always() # Run cleanup even if tests fail
        run: |
          # Terminate the test instance
          if [ -n "$INSTANCE_ID" ]; then
            echo "Terminating test instance: $INSTANCE_ID"
            aws ec2 terminate-instances --instance-ids $INSTANCE_ID
          fi
          
          # You could add additional cleanup steps here as needed